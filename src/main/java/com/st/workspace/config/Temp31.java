package com.st.workspace.config;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.st.workspace.entity.Workspace;
import com.st.workspace.utils.GzipUtil;
import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static com.st.workspace.utils.GzipUtil.UTF_8;

/**
 * @see https://localcoder.org/deserializing-jackson-dynamic-key-value
 *      https://www.baeldung.com/java-map-key-from-value
 */
public class Temp31 {

    public static void main(String[] args) throws IOException {
        var payload = "";
        var decompressPayload = GzipUtil.toDecompress(payload, UTF_8);

        ObjectMapper objectMapper = new Jackson2ObjectMapperBuilder().build();
        Map map = objectMapper.readValue(decompressPayload, Map.class);
        for (Object o : map.keySet()) {
            String workspaceId = (String) o;
            System.out.println("id: " + workspaceId);

            Map<String, Object> workspace = (Map<String, Object>) map.get(workspaceId);
            System.out.println("barType: " + workspace.get("barType"));
            System.out.println("timestamp: " + workspace.get("timestamp"));
            System.out.println("symbol: " + workspace.get("symbol"));
            System.out.println("isPlaceHolder: " + workspace.get("isPlaceHolder"));
            System.out.println("index: " + workspace.get("index"));
            System.out.println("isVisible: " + workspace.get("isVisible"));
            System.out.println("timeInterval: " + workspace.get("timeInterval"));
            System.out.println("instrument: " + workspace.get("instrument"));

            Map<String, String> instrument = (Map<String, String>) workspace.get("instrument");
            System.out.println("instrument.company: " + instrument.get("company"));
            System.out.println("instrument.exchange: " + instrument.get("exchange"));
            System.out.println("instrument.symbol: " + instrument.get("symbol"));

            System.out.println("---");

            System.out.println(getChart(workspaceId, workspace));

            System.out.println();
        }
    }

    static Workspace.Chart getChart(String id, Map<String, Object> workspace) {
        return Workspace.Chart.builder()
                .id(id)
                .barType(workspace.get("barType").toString())
                .timestamp(Long.valueOf(workspace.get("timestamp").toString()))
                .symbol(workspace.get("symbol").toString())
                .isPlaceHolder(Boolean.valueOf(workspace.get("isPlaceHolder").toString()))
                .index(Integer.valueOf(workspace.get("index").toString()))
                .isVisible(Boolean.valueOf(workspace.get("isVisible").toString()))
                .timeInterval(Long.valueOf(workspace.get("timeInterval").toString()))
                .instrument(getInstrument((Map<String, String>) workspace.get("instrument")))
                .build();
    }

    static Workspace.Chart.Instrument getInstrument(Map<String, String> instrument) {
        return Workspace.Chart.Instrument.builder()
                .symbol(instrument.get("symbol"))
                .company(instrument.get("company"))
                .exchange(instrument.get("exchange"))
                .build();
    }
}
